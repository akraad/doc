#!/usr/bin/env bash
# Reliable Android/Kotlin error reporter → MyAppErrors.txt (macOS bash/zsh)

set +e
OUT="Errors.txt"; : > "$OUT"
BUILD_LOG=".my_build.log"; : > "$BUILD_LOG"
SYNC_LOG=".my_sync.log";  : > "$SYNC_LOG"

TIMEOUT_SECS="${TIMEOUT_SECS:-120}"
GRADLE_ARGS="--no-daemon --console=plain --max-workers=1 --stacktrace --warning-mode=all"

rel(){ local p="$1"; case "$p" in /*) p="${p#"$PWD/"}";; esac; printf "%s" "${p#./}"; }
esc(){ printf '%s' "$1" | sed 's/[][(){}.^$+*?|\\/]/\\&/g'; }

clean_err(){ sed -E 's/^.*:[0-9]+(:[0-9]+)?[: ]*//; s/^.*:\([0-9]+,[0-9]+\)[: ]*//; s/^[[:space:]]+//; s/[[:space:]]+$//; s/^[ew]:[[:space:]]*//' ; }
clean_warn(){ sed -E 's/^.*:[0-9]+(:[0-9]+)?[: ]*//; s/^.*:\([0-9]+,[0-9]+\)[: ]*//; s/^[[:space:]]+//; s/[[:space:]]+$//; s/^w:[[:space:]]*//' ; }

code_block(){ # <file> <line> → enclosing { ... } (best-effort)
  local f="$1" l="$2" s e
  [ -f "$f" ] || return 0
  s=$(awk -v L="$l" 'NR<=L{ if(index($0,"{")) S=NR } END{print S+0}' "$f")
  [ -z "$s" ] || [ "$s" = 0 ] && s="$l"
  e=$(awk -v L="$l" 'NR<L{next}{for(i=1;i<=length($0);i++){c=substr($0,i,1); if(c=="{")d++; if(c=="}"){d--; if(d<=0){print NR; exit}}}}' "$f")
  [ -z "$e" ] && e="$l"
  sed -n "${s},${e}p" "$f"
}

run_with_timeout(){ # usage: run_with_timeout <secs> <gradle args...>
  local secs="$1"; shift
  ( ./gradlew "$@" $GRADLE_ARGS >>"$BUILD_LOG" 2>&1 ) & local GPID=$!
  ( sleep "$secs"; kill -0 $GPID 2>/dev/null && echo "[TIMEOUT] killed after ${secs}s" >>"$BUILD_LOG" && kill -9 $GPID 2>/dev/null ) & local TPID=$!
  wait $GPID 2>/dev/null; kill -9 $TPID 2>/dev/null || true
}

# ---------------- 1) Sync/config quick scan ----------------
./gradlew tasks $GRADLE_ARGS >"$SYNC_LOG" 2>&1 || true
if grep -qEi "FAILURE:|\* What went wrong:|Caused by:|Plugin [^ ]+ not found|Could not resolve|Dependency .* not found|Invalid plugin" "$SYNC_LOG"; then
  grep -Ei "^(FAILURE:|\* What went wrong:|Caused by:|Plugin [^ ]+ not found|Could not resolve|Dependency .* not found|Invalid plugin)" "$SYNC_LOG" \
    | awk '{print "[SYNC] "$0"\n---"}' >> "$OUT"
else
  echo "[SYNC] No sync errors." >> "$OUT"; echo "---" >> "$OUT"
fi

# ---------------- 2) Compile (real, fast) ----------------
# اول تلاش می‌کنیم فقط Kotlinِ app را کامپایل کنیم؛ اگر app نبود یا نشد، به build می‌رویم
run_with_timeout "$TIMEOUT_SECS" :app:compileDebugKotlin -x test -x lint
# اگر چیزی توی لاگ خطا نرفت، دوباره compileDebugKotlin عمومی:
grep -qE "e: | error: |FAILURE:" "$BUILD_LOG" || run_with_timeout "$TIMEOUT_SECS" compileDebugKotlin -x test -x lint
# در نهایت fallback:
grep -qE "e: | error: |FAILURE:" "$BUILD_LOG" || run_with_timeout "$TIMEOUT_SECS" build -x test -x lint

# ---------------- 3) Parse build ERRORS ----------------
# الگوهای file:line هم برای ":42" هم برای ":(42,5)"
tmpE=".refs.err"; : > "$tmpE"
grep -Eo '([./][^ :")]+|/[^ :")]+)\.(kt|kts|java|xml): ?(\([0-9]+|[0-9]+)' "$BUILD_LOG" \
  | sed -E "s#^$PWD/##" \
  | sed -E -e 's/: *\(([0-9]+).*/:\1/' -e 's/: *([0-9]+).*/:\1/' \
  | sort -u > "$tmpE"

get_msg(){ # <file> <line> → message (handles both ":42" and ":(42,5)")
  local f="$1" l="$2" ef; ef="$(esc "$f")"
  local m
  m="$(grep -m1 -E "$ef:[[:space:]]*\\($l," "$BUILD_LOG" | sed -E "s#.*$ef:[[:space:]]*\\($l,[0-9]+\\):[[:space:]]*##" | clean_err)"
  [ -n "$m" ] || m="$(grep -m1 -E "$ef:$l(:[0-9]+)?[: ]" "$BUILD_LOG" | sed -E "s#.*$ef:$l(:[0-9]+)?[: ]*##" | clean_err)"
  [ -n "$m" ] || m="$(grep -m1 -E "e: .*${ef}.*" "$BUILD_LOG" | clean_err)"
  printf "%s" "$m"
}

if [ -s "$tmpE" ]; then
  while IFS=: read -r file line; do
    [ -f "$file" ] || continue
    msg="$(get_msg "$file" "$line")"
    printf "%s:%s | ERROR | %s\n" "$(rel "$file")" "$line" "$msg" >> "$OUT"
    code_block "$file" "$line" >> "$OUT"
    echo "---" >> "$OUT"
  done < "$tmpE"
else
  echo "[BUILD] No build errors." >> "$OUT"; echo "---" >> "$OUT"
fi

# ---------------- 4) Parse WARNINGS ----------------
tmpW=".refs.warn"; : > "$tmpW"
grep -Eo 'w:[[:space:]]+[./][^ :")]+\.(kt|kts|java|xml): ?[0-9]+|([./][^ :")]+|/[^ :")]+)\.(kt|kts|java|xml): ?[0-9]+: [Ww]arning:' "$BUILD_LOG" \
  | sed -E 's/^[[:space:]]*w:[[:space:]]*//' \
  | sed -E 's/: [Ww]arning:.*$/:/' \
  | sed -E "s#^$PWD/##" | sed -E 's/[:]+$//' | sort -u > "$tmpW"

if [ -s "$tmpW" ]; then
  while IFS=: read -r file line; do
    [ -f "$file" ] || continue
    wmsg="$(grep -m1 -E "(^|[[:space:]])(w: )?$(esc "$file"):[[:space:]]*$line(,|:| )" "$BUILD_LOG" | clean_warn)"
    [ -n "$wmsg" ] || wmsg="$(grep -m1 -E "(^|[[:space:]])(w: )?$(esc "$file"):$line" "$BUILD_LOG" | clean_warn)"
    code="$(sed -n "${line}p" "$file")"
    printf "%s:%s | WARNING | %s\n%s\n---\n" "$(rel "$file")" "$line" "$wmsg" "$code" >> "$OUT"
  done < "$tmpW"
else
  echo "[WARN] No warnings." >> "$OUT"; echo "---" >> "$OUT"
fi

# ---------------- 5) Non-file (KSP/Exceptions/etc.) ----------------
if grep -qE "(Internal compiler error|java\.lang\.[A-Za-z]+Exception|ksp|KSP|Manifest merger failed|Storage for .*/kspCaches)" "$BUILD_LOG"; then
  grep -E "(Internal compiler error|java\.lang\.[A-Za-z]+Exception|ksp|KSP|Manifest merger failed|Storage for .*/kspCaches)" "$BUILD_LOG" \
    | awk '!seen[$0]++{print "(no file) | ERROR | "$0"\n---"}' >> "$OUT"
else
  echo "[NONFILE] No internal/KSP errors." >> "$OUT"; echo "---" >> "$OUT"
fi
